{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Previsão de possíveis compradoes",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMdeZ4x2kye1JiawouSIB/q"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EHyvr5cCiDHF"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'https://raw.githubusercontent.com/ricardorocha86/Dados-Redes-Sociais/master/Social_Network_Ads.csv'\n",
        "ads = pd.read_csv(url)"
      ],
      "metadata": {
        "id": "kBzCMiGuiMfl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ads.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "ntMgB2pPij4o",
        "outputId": "f1a9918d-5c4d-498c-fcfc-5851f0a4cb96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    User ID  Gender   Age  EstimatedSalary  Purchased\n",
              "0  15624510    Male  19.0          19000.0          0\n",
              "1  15810944    Male  35.0          20000.0          0\n",
              "2  15668575  Female  26.0          43000.0          0\n",
              "3  15603246  Female  27.0          57000.0          0\n",
              "4  15804002    Male  19.0          76000.0          0\n",
              "5  15728773    Male  27.0          58000.0          0\n",
              "6  15598044  Female  27.0          84000.0          0\n",
              "7  15694829  Female  32.0         150000.0          1\n",
              "8  15600575    Male  25.0          33000.0          0\n",
              "9  15727311  Female  35.0          65000.0          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6f03636-424d-4255-9281-6b139340e744\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>19000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15668575</td>\n",
              "      <td>Female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>43000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15603246</td>\n",
              "      <td>Female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>57000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>76000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>15728773</td>\n",
              "      <td>Male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>58000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>15598044</td>\n",
              "      <td>Female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>84000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>15694829</td>\n",
              "      <td>Female</td>\n",
              "      <td>32.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>15600575</td>\n",
              "      <td>Male</td>\n",
              "      <td>25.0</td>\n",
              "      <td>33000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>15727311</td>\n",
              "      <td>Female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6f03636-424d-4255-9281-6b139340e744')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b6f03636-424d-4255-9281-6b139340e744 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b6f03636-424d-4255-9281-6b139340e744');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Age'].mean() #Média de idades"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-23-vjf_ioKb",
        "outputId": "0029fad8-2695-4c57-ad63-73963ce4347d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "37.655"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Gender'] == 'Male' # True - onde é sexo masculino e False - Feminino"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H-9Ecanuj9hc",
        "outputId": "57884466-3ad1-424b-d69e-e5bb6d11fc7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       True\n",
              "1       True\n",
              "2      False\n",
              "3      False\n",
              "4       True\n",
              "       ...  \n",
              "395    False\n",
              "396     True\n",
              "397    False\n",
              "398     True\n",
              "399    False\n",
              "Name: Gender, Length: 400, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[10:20]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "86PQHrZ6kbgN",
        "outputId": "0f1328a8-3002-4c0f-ef0f-f258c5afa8b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     User ID  Gender   Age  EstimatedSalary  Purchased\n",
              "10  15570769  Female  26.0          80000.0          0\n",
              "11  15606274  Female  26.0          52000.0          0\n",
              "12  15746139    Male  20.0          86000.0          0\n",
              "13  15704987    Male  32.0          18000.0          0\n",
              "14  15628972    Male  18.0          82000.0          0\n",
              "15  15697686    Male  29.0          80000.0          0\n",
              "16  15733883    Male  47.0          25000.0          1\n",
              "17  15617482    Male  45.0          26000.0          1\n",
              "18  15704583    Male  46.0          28000.0          1\n",
              "19  15621083  Female  48.0          29000.0          1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c464372-7034-458e-a116-1900b62a1124\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>15570769</td>\n",
              "      <td>Female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>80000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>15606274</td>\n",
              "      <td>Female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>52000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>15746139</td>\n",
              "      <td>Male</td>\n",
              "      <td>20.0</td>\n",
              "      <td>86000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>15704987</td>\n",
              "      <td>Male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>18000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15628972</td>\n",
              "      <td>Male</td>\n",
              "      <td>18.0</td>\n",
              "      <td>82000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>15697686</td>\n",
              "      <td>Male</td>\n",
              "      <td>29.0</td>\n",
              "      <td>80000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>15733883</td>\n",
              "      <td>Male</td>\n",
              "      <td>47.0</td>\n",
              "      <td>25000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>15617482</td>\n",
              "      <td>Male</td>\n",
              "      <td>45.0</td>\n",
              "      <td>26000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>15704583</td>\n",
              "      <td>Male</td>\n",
              "      <td>46.0</td>\n",
              "      <td>28000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>15621083</td>\n",
              "      <td>Female</td>\n",
              "      <td>48.0</td>\n",
              "      <td>29000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c464372-7034-458e-a116-1900b62a1124')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2c464372-7034-458e-a116-1900b62a1124 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2c464372-7034-458e-a116-1900b62a1124');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ ads['Gender'] == 'Male']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "HacdcsyKkro2",
        "outputId": "fe7c0348-c11d-4a3b-f838-8e698379be31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      User ID Gender   Age  EstimatedSalary  Purchased\n",
              "0    15624510   Male  19.0          19000.0          0\n",
              "1    15810944   Male  35.0          20000.0          0\n",
              "4    15804002   Male  19.0          76000.0          0\n",
              "5    15728773   Male  27.0          58000.0          0\n",
              "8    15600575   Male  25.0          33000.0          0\n",
              "..        ...    ...   ...              ...        ...\n",
              "390  15807837   Male  48.0          33000.0          1\n",
              "391  15592570   Male  47.0          23000.0          1\n",
              "393  15635893   Male  60.0          42000.0          1\n",
              "396  15706071   Male  51.0          23000.0          1\n",
              "398  15755018   Male  36.0          33000.0          0\n",
              "\n",
              "[196 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ab0fc643-b219-41e2-97d1-f9ca06c0c131\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>19000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>76000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>15728773</td>\n",
              "      <td>Male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>58000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>15600575</td>\n",
              "      <td>Male</td>\n",
              "      <td>25.0</td>\n",
              "      <td>33000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>390</th>\n",
              "      <td>15807837</td>\n",
              "      <td>Male</td>\n",
              "      <td>48.0</td>\n",
              "      <td>33000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391</th>\n",
              "      <td>15592570</td>\n",
              "      <td>Male</td>\n",
              "      <td>47.0</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>393</th>\n",
              "      <td>15635893</td>\n",
              "      <td>Male</td>\n",
              "      <td>60.0</td>\n",
              "      <td>42000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>15706071</td>\n",
              "      <td>Male</td>\n",
              "      <td>51.0</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>15755018</td>\n",
              "      <td>Male</td>\n",
              "      <td>36.0</td>\n",
              "      <td>33000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>196 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab0fc643-b219-41e2-97d1-f9ca06c0c131')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ab0fc643-b219-41e2-97d1-f9ca06c0c131 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ab0fc643-b219-41e2-97d1-f9ca06c0c131');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ ads['Gender'] == 'Male']['Age'] #Index referente somente a masculino do index original, por isso o salto da numeração"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kuZ9FuqvmA-W",
        "outputId": "0d36d895-f6c1-4e1f-e1bc-b5c8b972e657"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      19.0\n",
              "1      35.0\n",
              "4      19.0\n",
              "5      27.0\n",
              "8      25.0\n",
              "       ... \n",
              "390    48.0\n",
              "391    47.0\n",
              "393    60.0\n",
              "396    51.0\n",
              "398    36.0\n",
              "Name: Age, Length: 196, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads #Original com 400 linhas e 5 colunas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "yISAfiwbm5j2",
        "outputId": "88229869-2f75-436b-c57a-e72133b78bf4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      User ID  Gender   Age  EstimatedSalary  Purchased\n",
              "0    15624510    Male  19.0          19000.0          0\n",
              "1    15810944    Male  35.0          20000.0          0\n",
              "2    15668575  Female  26.0          43000.0          0\n",
              "3    15603246  Female  27.0          57000.0          0\n",
              "4    15804002    Male  19.0          76000.0          0\n",
              "..        ...     ...   ...              ...        ...\n",
              "395  15691863  Female  46.0          41000.0          1\n",
              "396  15706071    Male  51.0          23000.0          1\n",
              "397  15654296  Female  50.0          20000.0          1\n",
              "398  15755018    Male  36.0          33000.0          0\n",
              "399  15594041  Female  49.0          36000.0          1\n",
              "\n",
              "[400 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6decaa6a-c7a0-4fa8-a0f7-a89f75b5fa63\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>19000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15668575</td>\n",
              "      <td>Female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>43000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15603246</td>\n",
              "      <td>Female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>57000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>76000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>15691863</td>\n",
              "      <td>Female</td>\n",
              "      <td>46.0</td>\n",
              "      <td>41000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>15706071</td>\n",
              "      <td>Male</td>\n",
              "      <td>51.0</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>15654296</td>\n",
              "      <td>Female</td>\n",
              "      <td>50.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>15755018</td>\n",
              "      <td>Male</td>\n",
              "      <td>36.0</td>\n",
              "      <td>33000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>15594041</td>\n",
              "      <td>Female</td>\n",
              "      <td>49.0</td>\n",
              "      <td>36000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6decaa6a-c7a0-4fa8-a0f7-a89f75b5fa63')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6decaa6a-c7a0-4fa8-a0f7-a89f75b5fa63 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6decaa6a-c7a0-4fa8-a0f7-a89f75b5fa63');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ ads['Gender'] == 'Male']['Age'].mean() # MEAN() No caso faz a média de idade do público masculino"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fvtRekYLmdqq",
        "outputId": "d9482818-a199-44e2-d880-985fbc611713"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "36.86734693877551"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ ads['Gender'] == 'Female']['Age'].mean() #Média de idade do público feminino"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m60gQ0KWnfB2",
        "outputId": "4ddd2ec3-3977-40ba-88c6-8da3d4b300fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "38.411764705882355"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Método LOC #Localiza a coluna\n",
        "ads.loc[ ads['Gender'] == 'Male' , 'Age']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7QU4Ox_vnwJ9",
        "outputId": "a686828d-28dc-4dcf-c4e6-c68dd12c817a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      19.0\n",
              "1      35.0\n",
              "4      19.0\n",
              "5      27.0\n",
              "8      25.0\n",
              "       ... \n",
              "390    48.0\n",
              "391    47.0\n",
              "393    60.0\n",
              "396    51.0\n",
              "398    36.0\n",
              "Name: Age, Length: 196, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.loc[ ads['Gender'] == 'Male' , 'Age'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wZIjomJlo6Pa",
        "outputId": "c7e1b88c-1f52-4483-b379-b5bbc8789a44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "36.86734693877551"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Purchased'] #Quem comprou e quem não comprou"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HoIXqnfNpERS",
        "outputId": "617121f1-bda6-4ba8-9c1a-cd58a0136096"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      0\n",
              "1      0\n",
              "2      0\n",
              "3      0\n",
              "4      0\n",
              "      ..\n",
              "395    1\n",
              "396    1\n",
              "397    1\n",
              "398    0\n",
              "399    1\n",
              "Name: Purchased, Length: 400, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Purchased'].describe() #Quem comprou e quem não comprou"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hWjh_1SopUQt",
        "outputId": "2e0c5e61-5db5-44b5-b310-c779ff66ec2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    400.000000\n",
              "mean       0.357500\n",
              "std        0.479864\n",
              "min        0.000000\n",
              "25%        0.000000\n",
              "50%        0.000000\n",
              "75%        1.000000\n",
              "max        1.000000\n",
              "Name: Purchased, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.loc[ ads['Gender'] == 'Male' , 'Purchased'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xwch_-IPqObq",
        "outputId": "6b003183-ac62-4cb4-8633-8e13985cfd98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.336734693877551"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.loc[ ads['Gender'] == 'Female' , 'Purchased'].mean() # O público feminino tem comprado mais que o masculino"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gJ-BCBaFqchT",
        "outputId": "eb10cc87-5247-4a75-bb49-ca5a7f2291d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.37745098039215685"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Método ILOC ( Index Location)\n",
        "ads.iloc[0:10, 3:5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "mfmk6a9Rq55A",
        "outputId": "ab61cf03-ad61-4ee0-b6fd-e74dd62b5681"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   EstimatedSalary  Purchased\n",
              "0          19000.0          0\n",
              "1          20000.0          0\n",
              "2          43000.0          0\n",
              "3          57000.0          0\n",
              "4          76000.0          0\n",
              "5          58000.0          0\n",
              "6          84000.0          0\n",
              "7         150000.0          1\n",
              "8          33000.0          0\n",
              "9          65000.0          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2cc42f4a-d8eb-42c9-9b26-79137cd732da\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>57000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>76000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>58000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>84000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>33000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>65000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2cc42f4a-d8eb-42c9-9b26-79137cd732da')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2cc42f4a-d8eb-42c9-9b26-79137cd732da button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2cc42f4a-d8eb-42c9-9b26-79137cd732da');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.iloc[0: 10, :] # O : é usado pra fazer cortes, significa: Até... Desde que..."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "QeDV7zKSrqYx",
        "outputId": "5e475458-33c6-490f-d263-d460f2b48779"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    User ID  Gender   Age  EstimatedSalary  Purchased\n",
              "0  15624510    Male  19.0          19000.0          0\n",
              "1  15810944    Male  35.0          20000.0          0\n",
              "2  15668575  Female  26.0          43000.0          0\n",
              "3  15603246  Female  27.0          57000.0          0\n",
              "4  15804002    Male  19.0          76000.0          0\n",
              "5  15728773    Male  27.0          58000.0          0\n",
              "6  15598044  Female  27.0          84000.0          0\n",
              "7  15694829  Female  32.0         150000.0          1\n",
              "8  15600575    Male  25.0          33000.0          0\n",
              "9  15727311  Female  35.0          65000.0          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f7e6981-b963-4b15-9e8e-581911536a5a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>19000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15668575</td>\n",
              "      <td>Female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>43000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15603246</td>\n",
              "      <td>Female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>57000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>76000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>15728773</td>\n",
              "      <td>Male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>58000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>15598044</td>\n",
              "      <td>Female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>84000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>15694829</td>\n",
              "      <td>Female</td>\n",
              "      <td>32.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>15600575</td>\n",
              "      <td>Male</td>\n",
              "      <td>25.0</td>\n",
              "      <td>33000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>15727311</td>\n",
              "      <td>Female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>65000.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f7e6981-b963-4b15-9e8e-581911536a5a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3f7e6981-b963-4b15-9e8e-581911536a5a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3f7e6981-b963-4b15-9e8e-581911536a5a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.loc[ ads['Gender'] == 'Male' , 'EstimatedSalary'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3a7atRxCuANR",
        "outputId": "b53eda3f-ca64-43e9-cc1b-558ed76aa1c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "67642.85714285714"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.loc[ ads['Gender'] == 'Female' , 'EstimatedSalary'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LeGnIdlwuHLS",
        "outputId": "092d8f98-fa4e-4ff7-bccf-37afece78bc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "71759.80392156863"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[   ads['Gender'] == 'Male' ][ 'EstimatedSalary'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zUFbVZzXub5y",
        "outputId": "ac4a991c-bf91-4589-d4c3-a3057426bc9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "67642.85714285714"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[   ads['Gender'] == 'Female' ][ 'EstimatedSalary'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1MbzUupTuz_a",
        "outputId": "bd209380-1e0f-4d8d-f3e7-ef46dd9d04e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "71759.80392156863"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Purchased'] == 0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bhvN-KHFu4J2",
        "outputId": "ef20df79-35e9-4c19-e385-b7cd227d54d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       True\n",
              "1       True\n",
              "2       True\n",
              "3       True\n",
              "4       True\n",
              "       ...  \n",
              "395    False\n",
              "396    False\n",
              "397    False\n",
              "398     True\n",
              "399    False\n",
              "Name: Purchased, Length: 400, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 0]['Age']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lgcyx-rVvF1N",
        "outputId": "ce0cfea2-f205-4955-814b-05131e4aa2b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      19.0\n",
              "1      35.0\n",
              "2      26.0\n",
              "3      27.0\n",
              "4      19.0\n",
              "       ... \n",
              "377    42.0\n",
              "380    42.0\n",
              "387    39.0\n",
              "394    39.0\n",
              "398    36.0\n",
              "Name: Age, Length: 257, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 0]['Age'].mean() # Média da idade dos que não compraram"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KaqLMlTIv2vz",
        "outputId": "11e63cb9-f151-4aef-bc39-10ccee05c8b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32.793774319066145"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 1]['Age'].mean() # Média da idade dos que compraram"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VF79o6d5v9ht",
        "outputId": "c2596e12-64fb-42a2-8a02-27905daf8634"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "46.39160839160839"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 0]['EstimatedSalary'].mean() # Média do Salário dos que não compraram"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mz_5dDHswW2D",
        "outputId": "31b368d5-e765-42ca-a42a-0753f184405e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "60544.74708171206"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 1]['EstimatedSalary'].mean() # Média de salário dos que não compraram\n",
        "#.MEAN() Só funciona com números"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QuuX5rYVw2qC",
        "outputId": "e2c61484-6ed4-4f85-b942-d91028c91e1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "86272.72727272728"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 0]['Gender'].describe() # Gênero dos que a maioria não compraram\n",
        "#.Describe faz essa contagem"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "648f7b1c-98d5-4ee3-eab5-702e8e249fef",
        "id": "uLySqBNdxjbN"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count      257\n",
              "unique       2\n",
              "top       Male\n",
              "freq       130\n",
              "Name: Gender, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 0]['Gender'].value_counts() # Gênero dos que a maioria não compraram\n",
        "#.Value_counts() faz a contagem do Gênero"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vsz7usVbzQXi",
        "outputId": "a3959c6c-6c67-44a5-b839-39e40acb401f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Male      130\n",
              "Female    127\n",
              "Name: Gender, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 1]['Gender'].value_counts() # Gênero dos que a maioria compraram\n",
        "#.Value_counts() faz a contagem do Gênero"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O6BFKFZXz1jm",
        "outputId": "744bca0a-7e26-43f7-e29d-7d264ec5e546"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Female    77\n",
              "Male      66\n",
              "Name: Gender, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 0]['Gender'].value_counts().plot(kind = 'pie')# Gênero no gráfico dos que a maioria não compraram\n",
        "#Grafico de pizza "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "GPcYw5gL0opy",
        "outputId": "4250f58c-9862-4d9d-eff7-6c716822baa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa0639966d0>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[ads['Purchased'] == 1]['Gender'].value_counts().plot(kind = 'pie')# Gênero dos que a maioria  compraram\n",
        "#Grafico de pizza "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "u1xF8mzc0E_y",
        "outputId": "4c8f5935-fa17-45cb-e62e-6b82d3f3ecba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa063a694d0>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Age'].groupby(ads['Gender']).mean() #Groupby retorna média de idade por gênero"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "77ee318c-595f-44ec-8a95-0aac039c2ba8",
        "id": "W2WgQMawxjbO"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Gender\n",
              "Female    38.411765\n",
              "Male      36.867347\n",
              "Name: Age, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.groupby(ads['Gender']).mean() # Tudo que foi feito em uma única linha de comando"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "b41kwQog2Gip",
        "outputId": "1b18b059-d1d3-48ca-c2e0-56ea8682d28f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             User ID        Age  EstimatedSalary  Purchased\n",
              "Gender                                                     \n",
              "Female  1.569331e+07  38.411765     71759.803922   0.377451\n",
              "Male    1.568970e+07  36.867347     67642.857143   0.336735"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3dd34b5b-1569-4c4e-89c1-bff4cc3ab671\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Female</th>\n",
              "      <td>1.569331e+07</td>\n",
              "      <td>38.411765</td>\n",
              "      <td>71759.803922</td>\n",
              "      <td>0.377451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>1.568970e+07</td>\n",
              "      <td>36.867347</td>\n",
              "      <td>67642.857143</td>\n",
              "      <td>0.336735</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3dd34b5b-1569-4c4e-89c1-bff4cc3ab671')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3dd34b5b-1569-4c4e-89c1-bff4cc3ab671 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3dd34b5b-1569-4c4e-89c1-bff4cc3ab671');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.groupby(ads['Gender']).max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "0miK2mBe2Izn",
        "outputId": "157d6123-780e-4b35-8800-fe98539a8cd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         User ID   Age  EstimatedSalary  Purchased\n",
              "Gender                                            \n",
              "Female  15815236  60.0         150000.0          1\n",
              "Male    15814816  60.0         150000.0          1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-65380876-93dc-4324-8836-237b96e78f86\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Female</th>\n",
              "      <td>15815236</td>\n",
              "      <td>60.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>15814816</td>\n",
              "      <td>60.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65380876-93dc-4324-8836-237b96e78f86')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-65380876-93dc-4324-8836-237b96e78f86 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-65380876-93dc-4324-8836-237b96e78f86');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.groupby(ads['Gender']).describe() #Toda análise estatística"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "AVPTsnAg21YO",
        "outputId": "02dd7add-b0bf-4eda-d0a3-eb7c615d2ccc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       User ID                                                       \\\n",
              "         count          mean           std         min          25%   \n",
              "Gender                                                                \n",
              "Female   204.0  1.569331e+07  73025.769592  15566689.0  15624274.50   \n",
              "Male     196.0  1.568970e+07  70346.177439  15570932.0  15628197.25   \n",
              "\n",
              "                                              Age             ...  \\\n",
              "               50%         75%         max  count       mean  ...   \n",
              "Gender                                                        ...   \n",
              "Female  15695254.0  15757990.5  15815236.0  204.0  38.411765  ...   \n",
              "Male    15689588.0  15744341.5  15814816.0  196.0  36.867347  ...   \n",
              "\n",
              "       EstimatedSalary           Purchased                                     \\\n",
              "                   75%       max     count      mean       std  min  25%  50%   \n",
              "Gender                                                                          \n",
              "Female         90750.0  150000.0     204.0  0.377451  0.485942  0.0  0.0  0.0   \n",
              "Male           86000.0  150000.0     196.0  0.336735  0.473804  0.0  0.0  0.0   \n",
              "\n",
              "                  \n",
              "        75%  max  \n",
              "Gender            \n",
              "Female  1.0  1.0  \n",
              "Male    1.0  1.0  \n",
              "\n",
              "[2 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49a76643-3148-4fcc-9181-49392305314c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"8\" halign=\"left\">User ID</th>\n",
              "      <th colspan=\"2\" halign=\"left\">Age</th>\n",
              "      <th>...</th>\n",
              "      <th colspan=\"2\" halign=\"left\">EstimatedSalary</th>\n",
              "      <th colspan=\"8\" halign=\"left\">Purchased</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>...</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Female</th>\n",
              "      <td>204.0</td>\n",
              "      <td>1.569331e+07</td>\n",
              "      <td>73025.769592</td>\n",
              "      <td>15566689.0</td>\n",
              "      <td>15624274.50</td>\n",
              "      <td>15695254.0</td>\n",
              "      <td>15757990.5</td>\n",
              "      <td>15815236.0</td>\n",
              "      <td>204.0</td>\n",
              "      <td>38.411765</td>\n",
              "      <td>...</td>\n",
              "      <td>90750.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>204.0</td>\n",
              "      <td>0.377451</td>\n",
              "      <td>0.485942</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>196.0</td>\n",
              "      <td>1.568970e+07</td>\n",
              "      <td>70346.177439</td>\n",
              "      <td>15570932.0</td>\n",
              "      <td>15628197.25</td>\n",
              "      <td>15689588.0</td>\n",
              "      <td>15744341.5</td>\n",
              "      <td>15814816.0</td>\n",
              "      <td>196.0</td>\n",
              "      <td>36.867347</td>\n",
              "      <td>...</td>\n",
              "      <td>86000.0</td>\n",
              "      <td>150000.0</td>\n",
              "      <td>196.0</td>\n",
              "      <td>0.336735</td>\n",
              "      <td>0.473804</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 32 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49a76643-3148-4fcc-9181-49392305314c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-49a76643-3148-4fcc-9181-49392305314c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-49a76643-3148-4fcc-9181-49392305314c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.groupby(ads['Purchased']).describe() #Toda análise estatística dos compradores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "pYVmHVkz3PJ2",
        "outputId": "aa05b6a0-470e-441c-f2d3-54f42c422de9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          User ID                                                      \\\n",
              "            count          mean           std         min         25%   \n",
              "Purchased                                                               \n",
              "0           257.0  1.569116e+07  72086.957429  15566689.0  15624510.0   \n",
              "1           143.0  1.569222e+07  71128.514008  15569641.0  15630449.0   \n",
              "\n",
              "                                                 Age             ...        \\\n",
              "                  50%         75%         max  count       mean  ...   75%   \n",
              "Purchased                                                        ...         \n",
              "0          15693264.0  15753874.0  15814816.0  257.0  32.793774  ...  38.0   \n",
              "1          15694829.0  15749718.5  15815236.0  143.0  46.391608  ...  53.0   \n",
              "\n",
              "                EstimatedSalary                                                \\\n",
              "            max           count          mean           std      min      25%   \n",
              "Purchased                                                                       \n",
              "0          59.0           257.0  60544.747082  24351.570102  15000.0  44000.0   \n",
              "1          60.0           143.0  86272.727273  42064.200064  20000.0  41000.0   \n",
              "\n",
              "                                        \n",
              "               50%       75%       max  \n",
              "Purchased                               \n",
              "0          61000.0   77000.0  141000.0  \n",
              "1          90000.0  122500.0  150000.0  \n",
              "\n",
              "[2 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e05f68c-1ed1-4fc2-b7ac-ea5f098c63ef\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"8\" halign=\"left\">User ID</th>\n",
              "      <th colspan=\"5\" halign=\"left\">Age</th>\n",
              "      <th colspan=\"8\" halign=\"left\">EstimatedSalary</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>...</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchased</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>257.0</td>\n",
              "      <td>1.569116e+07</td>\n",
              "      <td>72086.957429</td>\n",
              "      <td>15566689.0</td>\n",
              "      <td>15624510.0</td>\n",
              "      <td>15693264.0</td>\n",
              "      <td>15753874.0</td>\n",
              "      <td>15814816.0</td>\n",
              "      <td>257.0</td>\n",
              "      <td>32.793774</td>\n",
              "      <td>...</td>\n",
              "      <td>38.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>257.0</td>\n",
              "      <td>60544.747082</td>\n",
              "      <td>24351.570102</td>\n",
              "      <td>15000.0</td>\n",
              "      <td>44000.0</td>\n",
              "      <td>61000.0</td>\n",
              "      <td>77000.0</td>\n",
              "      <td>141000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>143.0</td>\n",
              "      <td>1.569222e+07</td>\n",
              "      <td>71128.514008</td>\n",
              "      <td>15569641.0</td>\n",
              "      <td>15630449.0</td>\n",
              "      <td>15694829.0</td>\n",
              "      <td>15749718.5</td>\n",
              "      <td>15815236.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>46.391608</td>\n",
              "      <td>...</td>\n",
              "      <td>53.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>86272.727273</td>\n",
              "      <td>42064.200064</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>41000.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>122500.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 24 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e05f68c-1ed1-4fc2-b7ac-ea5f098c63ef')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8e05f68c-1ed1-4fc2-b7ac-ea5f098c63ef button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8e05f68c-1ed1-4fc2-b7ac-ea5f098c63ef');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[['Age' , 'EstimatedSalary'] ].groupby(ads['Purchased']).describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "06c-rhm8FCA1",
        "outputId": "b41064cf-366d-499d-d128-22c5e8334095"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Age                                                     \\\n",
              "           count       mean       std   min   25%   50%   75%   max   \n",
              "Purchased                                                             \n",
              "0          257.0  32.793774  7.985844  18.0  26.0  34.0  38.0  59.0   \n",
              "1          143.0  46.391608  8.612172  27.0  39.5  47.0  53.0  60.0   \n",
              "\n",
              "          EstimatedSalary                                                \\\n",
              "                    count          mean           std      min      25%   \n",
              "Purchased                                                                 \n",
              "0                   257.0  60544.747082  24351.570102  15000.0  44000.0   \n",
              "1                   143.0  86272.727273  42064.200064  20000.0  41000.0   \n",
              "\n",
              "                                        \n",
              "               50%       75%       max  \n",
              "Purchased                               \n",
              "0          61000.0   77000.0  141000.0  \n",
              "1          90000.0  122500.0  150000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3794200c-ad0f-44b1-862b-6b4db9451c39\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"8\" halign=\"left\">Age</th>\n",
              "      <th colspan=\"8\" halign=\"left\">EstimatedSalary</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchased</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>257.0</td>\n",
              "      <td>32.793774</td>\n",
              "      <td>7.985844</td>\n",
              "      <td>18.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>257.0</td>\n",
              "      <td>60544.747082</td>\n",
              "      <td>24351.570102</td>\n",
              "      <td>15000.0</td>\n",
              "      <td>44000.0</td>\n",
              "      <td>61000.0</td>\n",
              "      <td>77000.0</td>\n",
              "      <td>141000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>143.0</td>\n",
              "      <td>46.391608</td>\n",
              "      <td>8.612172</td>\n",
              "      <td>27.0</td>\n",
              "      <td>39.5</td>\n",
              "      <td>47.0</td>\n",
              "      <td>53.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>86272.727273</td>\n",
              "      <td>42064.200064</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>41000.0</td>\n",
              "      <td>90000.0</td>\n",
              "      <td>122500.0</td>\n",
              "      <td>150000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3794200c-ad0f-44b1-862b-6b4db9451c39')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3794200c-ad0f-44b1-862b-6b4db9451c39 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3794200c-ad0f-44b1-862b-6b4db9451c39');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads[['Age' , 'EstimatedSalary'] ].groupby([ads['Purchased'], ads['Gender']]).mean()\n",
        "#Diferença de salário"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5tbiBbvIGWB9",
        "outputId": "f265d636-2e35-4898-9923-253eb7775a57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Age  EstimatedSalary\n",
              "Purchased Gender                            \n",
              "0         Female  33.110236     61480.314961\n",
              "          Male    32.484615     59630.769231\n",
              "1         Female  47.155844     88714.285714\n",
              "          Male    45.500000     83424.242424"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-110369d0-3d54-4b09-970f-26ab8da4c71f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Purchased</th>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
              "      <th>Female</th>\n",
              "      <td>33.110236</td>\n",
              "      <td>61480.314961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>32.484615</td>\n",
              "      <td>59630.769231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
              "      <th>Female</th>\n",
              "      <td>47.155844</td>\n",
              "      <td>88714.285714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Male</th>\n",
              "      <td>45.500000</td>\n",
              "      <td>83424.242424</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-110369d0-3d54-4b09-970f-26ab8da4c71f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-110369d0-3d54-4b09-970f-26ab8da4c71f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-110369d0-3d54-4b09-970f-26ab8da4c71f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.boxplot(column = ['Age'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "GL6xtNfwHNbf",
        "outputId": "3283c3e6-0949-4a50-8c9f-9a3eb37fd53a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa063437dd0>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.boxplot(column = ['Age'], by = 'Purchased')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "a9dq6OOiHq18",
        "outputId": "5ccbc7af-6f91-48ef-f975-98e7bc75e66e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa063451710>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.boxplot(column = ['EstimatedSalary'], by = 'Purchased')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "-j9hhMnmINnm",
        "outputId": "55fdca00-186e-4cea-8f5f-7f9176125683"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa0632eda50>"
            ]
          },
          "metadata": {},
          "execution_count": 77
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Teste 1 - Vou inferir como comprador aqules que tem idade acima da média"
      ],
      "metadata": {
        "id": "Wx8vI0I8Ioh4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def aux(x):\n",
        "    if x > ads['Age'].mean():\n",
        "        return 1\n",
        "    else:\n",
        "        return 0\n",
        "ads['Teste1'] = ads['Age'].apply(aux)"
      ],
      "metadata": {
        "id": "AIFjMUE-I7jy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ads"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "t4-Q1tvFKUp9",
        "outputId": "2f6066eb-4e1c-4ea8-e118-d45ce909b881"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      User ID  Gender   Age  EstimatedSalary  Purchased  Teste1\n",
              "0    15624510    Male  19.0          19000.0          0       0\n",
              "1    15810944    Male  35.0          20000.0          0       0\n",
              "2    15668575  Female  26.0          43000.0          0       0\n",
              "3    15603246  Female  27.0          57000.0          0       0\n",
              "4    15804002    Male  19.0          76000.0          0       0\n",
              "..        ...     ...   ...              ...        ...     ...\n",
              "395  15691863  Female  46.0          41000.0          1       1\n",
              "396  15706071    Male  51.0          23000.0          1       1\n",
              "397  15654296  Female  50.0          20000.0          1       1\n",
              "398  15755018    Male  36.0          33000.0          0       0\n",
              "399  15594041  Female  49.0          36000.0          1       1\n",
              "\n",
              "[400 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-06814886-8da7-488d-bf56-865988248cca\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "      <th>Teste1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>19000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15668575</td>\n",
              "      <td>Female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>43000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15603246</td>\n",
              "      <td>Female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>57000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>76000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>15691863</td>\n",
              "      <td>Female</td>\n",
              "      <td>46.0</td>\n",
              "      <td>41000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>15706071</td>\n",
              "      <td>Male</td>\n",
              "      <td>51.0</td>\n",
              "      <td>23000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>15654296</td>\n",
              "      <td>Female</td>\n",
              "      <td>50.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>15755018</td>\n",
              "      <td>Male</td>\n",
              "      <td>36.0</td>\n",
              "      <td>33000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>15594041</td>\n",
              "      <td>Female</td>\n",
              "      <td>49.0</td>\n",
              "      <td>36000.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06814886-8da7-488d-bf56-865988248cca')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-06814886-8da7-488d-bf56-865988248cca button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-06814886-8da7-488d-bf56-865988248cca');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Purchased'] == ads['Teste1']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FZc1NK7nKyYo",
        "outputId": "43b537d3-6276-4f7c-c4a5-f9d8b080a535"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      True\n",
              "1      True\n",
              "2      True\n",
              "3      True\n",
              "4      True\n",
              "       ... \n",
              "395    True\n",
              "396    True\n",
              "397    True\n",
              "398    True\n",
              "399    True\n",
              "Length: 400, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(ads['Purchased'] == ads['Teste1']).mean() # Porcentagem de acerto com essa \"Euristica\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nAe2dwQtLKbS",
        "outputId": "f1ab6f27-4cd0-4b68-db35-ca3ea9b3510f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7375"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Teste2'] = 0\n",
        "ads['EstimatedSalary'] > ads['EstimatedSalary'].mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m2n2BbWRLps6",
        "outputId": "091fced6-02dd-4a1b-c053-a59a835212f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      False\n",
              "1      False\n",
              "2      False\n",
              "3      False\n",
              "4       True\n",
              "       ...  \n",
              "395    False\n",
              "396    False\n",
              "397    False\n",
              "398    False\n",
              "399    False\n",
              "Name: EstimatedSalary, Length: 400, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Teste2'] = 0\n",
        "ads.loc[ads['EstimatedSalary'] > ads['EstimatedSalary'].mean(), 'Teste2'] = 1"
      ],
      "metadata": {
        "id": "_jdtinS6MpBy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ads.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XvyWb-9zL9Fa",
        "outputId": "dea83ad3-fadf-4dfc-98fc-bccf8be6d139"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    User ID  Gender   Age  EstimatedSalary  Purchased  Teste1  Teste2\n",
              "0  15624510    Male  19.0          19000.0          0       0       0\n",
              "1  15810944    Male  35.0          20000.0          0       0       0\n",
              "2  15668575  Female  26.0          43000.0          0       0       0\n",
              "3  15603246  Female  27.0          57000.0          0       0       0\n",
              "4  15804002    Male  19.0          76000.0          0       0       1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4eba96c1-9bdf-4f5a-acd1-d06d68da064c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "      <th>Teste1</th>\n",
              "      <th>Teste2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>19000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>20000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15668575</td>\n",
              "      <td>Female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>43000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15603246</td>\n",
              "      <td>Female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>57000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19.0</td>\n",
              "      <td>76000.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4eba96c1-9bdf-4f5a-acd1-d06d68da064c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4eba96c1-9bdf-4f5a-acd1-d06d68da064c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4eba96c1-9bdf-4f5a-acd1-d06d68da064c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(ads['Purchased'] == ads['Teste2']).mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aaTG-_8UNiia",
        "outputId": "d4ef5168-e8a8-459c-c728-b688b4cdda43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.62"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "sns.scatterplot(x = ads['Age'], y = ads['EstimatedSalary'])\n",
        "# Gráfico de dispersão com a varável idade e a estimativa de salário"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "lWdsM3OmOC57",
        "outputId": "95b1ebff-9de0-41af-fe93-3336df28dbc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa057a632d0>"
            ]
          },
          "metadata": {},
          "execution_count": 94
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "sns.scatterplot(x = ads['Age'], y = ads['EstimatedSalary'], hue = ads['Purchased'])\n",
        "# Gráfico de dispersão com a varável idade e a estimativa de salário\n",
        "#Mostra o salário e a idade de quem não comprou."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "4kORFTCdO131",
        "outputId": "e4ab029c-92ff-4ee2-b27c-46acdb38dc25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa054844b90>"
            ]
          },
          "metadata": {},
          "execution_count": 95
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "sns.scatterplot(x = ads['Age'], y = ads['EstimatedSalary'], hue = ads['Purchased'])\n",
        "plt.axhline(92000)\n",
        "# Gráfico de dispersão com a varável idade e a estimativa de salário"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "fKvHlUFnPoK7",
        "outputId": "9fac134f-e911-4673-a5e4-3e425665a66e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.lines.Line2D at 0x7fa051e50f50>"
            ]
          },
          "metadata": {},
          "execution_count": 99
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "sns.scatterplot(x = ads['Age'], y = ads['EstimatedSalary'], hue = ads['Purchased'])\n",
        "plt.axhline(92000, color = 'black', linestyle = 'dashed')\n",
        "plt.axvline(44.5, color = 'black', linestyle = 'dashed')\n",
        "# Gráfico de dispersão com a varável idade e a estimativa de salário\n",
        "# O gráfico mostra a faixa etária dos melhores compradores e o salário "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "Ptfy-GqyQvEv",
        "outputId": "662cbb2c-9513-4c62-f100-91d5f2679343"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.lines.Line2D at 0x7fa051c79c10>"
            ]
          },
          "metadata": {},
          "execution_count": 102
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads['Teste3'] = 1"
      ],
      "metadata": {
        "id": "m4lMCJ6kR9-y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(ads['Age'] < 44.5) & (ads['EstimatedSalary'] < 92000)\n",
        "#Seleção de possíveis compradores de acordo com a idade e salário"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67LlOkAkSInm",
        "outputId": "90f9b5e8-e4a2-43d8-e39d-6a0631086d33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       True\n",
              "1       True\n",
              "2       True\n",
              "3       True\n",
              "4       True\n",
              "       ...  \n",
              "395    False\n",
              "396    False\n",
              "397    False\n",
              "398     True\n",
              "399    False\n",
              "Length: 400, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ads.loc[(ads['Age'] < 44.5) & (ads['EstimatedSalary'] < 92000), 'Teste3'] = 0"
      ],
      "metadata": {
        "id": "YEGbeCUUTFGB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(ads['Purchased'] == ads['Teste3']).mean()\n",
        "# Uma euristíca com taxa de 91,5% de acerto na previsão da variável"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8yuRwa05T8r4",
        "outputId": "4fc3d279-3719-4995-a0f2-8120cfbb07aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.915"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    }
  ]
}